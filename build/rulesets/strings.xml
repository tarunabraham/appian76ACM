<?xml version="1.0"?>

<ruleset name="java.lang.String Rules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
These rules deal with different problems that can occur with manipulation of the class String or StringBuffer.
  </description>


    <rule name="AvoidDuplicateLiterals"
        message="The String literal {0} appears {1} times in this file; the first occurrence is on line {2}"
        class="net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule">
    <description>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    </description>
        <priority>3</priority>
   <properties>
    <property name="threshold" description="The number of duplicate literals reporting threshold" value="4"/>
   </properties>
    <example>
<![CDATA[
public class Foo {
 private void bar() {
    buz("Howdy");
    buz("Howdy");
    buz("Howdy");
    buz("Howdy");
 }
 private void buz(String x) {}
}
]]>
    </example>
  </rule>

    <rule name="StringInstantiation"
        message="Avoid instantiating String objects; this is usually unnecessary."
        class="net.sourceforge.pmd.rules.strings.StringInstantiation">
    <description>
Avoid instantiating String objects; this is usually unnecessary.
    </description>
       <priority>2</priority>
    <example>
<![CDATA[
public class Foo {
 private String bar = new String("bar"); // just do a String bar = "bar";
}
]]>
    </example>
    </rule>

   <rule name="StringToString"
        message="Avoid calling toString() on String objects; this is unnecessary"
        class="net.sourceforge.pmd.rules.strings.StringToStringRule">
    <description>
    Avoid calling toString() on String objects; this is unnecessary
    </description>
       <priority>3</priority>
    <example>
<![CDATA[
public class Foo {
 private String baz() {
  String bar = "howdy";
  return bar.toString();
 }
}
]]>
    </example>
    </rule>

    <rule name="AvoidConcatenatingNonLiteralsInStringBuffer"
        message="Avoid concatenating non literals in a StringBuffer constructor or append()"
        class="net.sourceforge.pmd.rules.strings.InefficientStringBuffering">
    <description>
Avoid concatenating non literals in a StringBuffer constructor or append().
    </description>
       <priority>2</priority>
    <example>
<![CDATA[
public class Foo {
 void bar() {
  // Avoid this
  StringBuffer sb=new
  StringBuffer("AAAAAAAAAA"+System.getProperty("java.io.tmpdir"));
  // use instead something like this
  StringBuffer sb = new StringBuffer("AAAAAAAAAA");
  sb.append(System.getProperty("java.io.tmpdir"));
 }
}
]]>
    </example>
    </rule>

    <rule name="UnnecessaryCaseChange"
          message="Using String.equalsIgnoreCase with toUpperCase/toLowerCase is usually unnecessary"
           class="net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange">
       <description>
Use String.equalsIgnoreCase rather than String.toUpperCase().equals()
       </description>
       <priority>3</priority>
       <example>
                 <![CDATA[
 public class Foo {
  public boolean bar(String buz) {
    // should be buz.equalsIgnoreCase("baz")
    return buz.toUpperCase().equals("baz");
    // another unnecessary toUpperCase()
    // return buz.toUpperCase().equalsIgnoreCase("baz");
  }
 }
                 ]]>
       </example>
     </rule>


</ruleset>

